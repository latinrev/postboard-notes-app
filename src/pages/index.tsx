import Head from "next/head";
import { getSession, GetSessionParams } from "next-auth/react";
import { getNotes } from "@/util/mongoFunctions";
import { connectToDatabase } from "@/util/mongodb";
import { useState } from "react";
import { NoteProps } from "@/interfaces/noteProps";
import { Grid, MantineProvider, MantineThemeOverride } from "@mantine/core";
import { AppContext } from "@/context/AppContext";
import HorizontalNavbar from "@/components/home/horizontalNavbar";
import NotesSection from "@/components/home/notesSection";

const myTheme: MantineThemeOverride = {
  colorScheme: "dark",
  colors: {
    highlight: ["#FBF4E4", "#F8E6BC", "#F9DB93", "#FFD369", "#F6C54E", "#EAB639", "#DDA929", "#C49629", "#A9842C", "#92752D"],
    opaqueDark: ["393e4677"],
    dark: ["#FFF", "#222831", "#FFF", "#fff", "#fff", "#393E46", "#393E46", "#222831", "#000", "#fff"],

    //texto, nose, content, placeholder, borders, boton adentro, cardBackground, backgorund, nose, nose
  },
  primaryColor: "highlight",
};

export default function Home({ fetchedNotes }: { fetchedNotes: NoteProps[] }) {
  const [notes, setNotes] = useState<NoteProps[]>(fetchedNotes);
  return (
    <>
      <MantineProvider theme={myTheme} withGlobalStyles withNormalizeCSS>
        <AppContext.Provider value={{ notes, setNotes }}>
          <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Grid gutter="xl">
            <Grid.Col span="content">
              <HorizontalNavbar />
            </Grid.Col>
            <Grid.Col span="auto">
              <NotesSection />
            </Grid.Col>
          </Grid>
        </AppContext.Provider>
      </MantineProvider>
    </>
  );
}
export async function getServerSideProps(context: GetSessionParams | undefined) {
  let session = await getSession(context);
  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: "/signin",
      },
    };
  }
  connectToDatabase();
  let fetchedNotes = await getNotes(session.user._id!);
  return { props: { fetchedNotes: JSON.parse(JSON.stringify(fetchedNotes)) } };
}
